---
- name: create group
  group:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ collector_user }}"
    - "{{ sync_user }}"

- name: create user
  user:
    name: "{{ item }}"
    group: "{{ item }}"
    comment: "testhelper for Probes"
    state: present
  with_items:
    - "{{ collector_user }}"
    - "{{ sync_user }}"

- name: collector nginx config
  template: src=ngx-collector dest=/etc/nginx/sites-enabled/ooni-collector
  notify: reload nginx
  when: with_nginx

- name: mkdir for config and data
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ collector_user }}"
    group: "{{ collector_user }}"
    mode: "u=rwx,g=rx,o="
  with_items:
    - "{{ collector_data_dir }}"
    - "{{ collector_data_dir }}/bin"
    - "{{ collector_data_dir }}/tor"
    - "{{ collector_data_dir }}/logs"
    - "{{ collector_data_dir }}/archive"
    - "{{ collector_data_dir }}/raw_reports"
    # This is legacy garbage
    - "{{ collector_data_dir }}/decks"
    - "{{ collector_data_dir}}/inputs"

- name: Configure the collector oonibackend.conf
  template:
    owner: "{{ collector_user }}"
    group: "{{ collector_user }}"
    src: oonibackend.conf.j2
    dest: "{{ collector_data_dir }}/oonibackend.conf"

- name: Write bin files
  template:
    owner: "{{ collector_user }}"
    group: "{{ collector_user }}"
    mode: "u+rwx"
    src: "{{ item }}.j2"
    dest: "{{ collector_data_dir }}/bin/{{ item }}"
  with_items:
    - "archive-to-renamed.py"
    - "daily-tasks.sh"

- name: ooni-collector webservice
  docker_container:
    image: openobservatory/backend:{{ collector_tag }}
    name: ooni-collector
    hostname: ooni-collector
    ports:
    - "{{ collector_port }}:{{ collector_port }}"
    volumes:
    - "{{ collector_data_dir }}:{{ collector_data_dir }}"
    command: "python bin/oonib --config {{ collector_data_dir }}/oonibackend.conf"
    # XXX This is commented out because it doesn't work as expected.
    # we may be able to workaround it by using the uid of the collector_user
    # instead.
    # user: "{{ collector_user }}:{{ collector_user }}"
    restart_policy: unless-stopped

- name: Setup the sync-user account
  user:
    name: sync-user
    shell: /bin/bash
    home: "/home/sync-user"

- name: mkdir for sync-user
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ sync_user }}"
    group: "{{ sync_user }}"
    mode: "u=rwx,g=rx,o="
  with_items:
    - "/home/sync-user/bin"
    - "/home/sync-user/.ssh"

- name: Write sync-user bin/rrysnc
  template:
    owner: "{{ sync_user }}"
    group: "{{ sync_user }}"
    mode: "u+rwx"
    src: "rrsync"
    dest: "/home/sync-user/bin/rrsync"

- name: Write sync-user .ssh/authorized_keys
  template:
    owner: "{{ sync_user }}"
    group: "{{ sync_user }}"
    src: "sync-user_authorized_keys.j2"
    dest: "/home/sync-user/.ssh/authorized_keys"
  tags: collector_ssh

- name: mkdir for collector data dir
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ collector_user }}"
    group: "{{ collector_user }}"
    mode: "u=rwx,g=rx,o=rx"
  with_items:
    - "{{ collector_data_dir }}"

- name: mkdir for sync-user data files
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ collector_user }}"
    group: "sync-user"
    mode: "u=rwx,g=rwx,o=rx"
  with_items:
    - "{{ collector_data_dir }}/renamed"
    - "{{ collector_data_dir }}/errored"
    - "{{ collector_data_dir }}/errored/empty"
    - "{{ collector_data_dir }}/errored/invalid"
    - "{{ collector_data_dir }}/errored/failed"

- name: "Install pyyaml for the daily-task"
  apt:
    name: "python-yaml"
    update_cache: yes
    state: latest

- cron:
    name: "run the daily tasks every hour"
    minute: "0"
    hour: "0"
    user: "root"
    job: "{{ collector_data_dir }}/bin/daily-tasks.sh"

- name: Setup the sshfeeder account
  user:
    name: sshfeeder
    group: sshfeeder
    groups: "{{ collector_user }}"
    createhome: yes
    append: yes
    shell: /bin/bash
    home: "/home/sshfeeder"
    system: no
  tags: collector_ssh

- name: Set authorized key for sshfeeder
  authorized_key:
    user: sshfeeder
    state: present
    key: "{{ sshfeeder_key }}"
  tags: collector_ssh
