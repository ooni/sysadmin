#!/usr/bin/env bash

# Build Dockerfile from clean git repo instead of working copy to prevent
# mistakes with working copy being copied to docker image.
#
# That's the script to build and publish containers to
# https://hub.docker.com/r/openobservatory/ for ooni-sysadmin convinence.
# It's not a generic script to build "public" OONI images (there are no such images).

if [ ! -r Dockerfile ]; then
    echo "$0: No 'Dockerfile' in $PWD" 1>&2
    exit 1
fi

git_head=$(git rev-parse HEAD)
if [ ${#git_head} != 40 ]; then
    echo "$0: Unable to get git HEAD" 1>&2
    exit 1
fi
git_head8=${git_head:0:8}

repo=$(git remote get-url --push origin | sed 's,.*/,,; s,\.git$,,; s,^ooni-,,')
prefix=$(git rev-parse --show-prefix | sed 's,/$,,; s,.*/,,')
if [ -z "$repo" ]; then
    echo "$0: failed to get reasonable git repo slug" 1>&2
    exit 1
fi

# git@github.com:TheTorProject/ooni-explorer.git -> explorer
# git@github.com:ooni/explorer.git -> explorer
# git@github.com:ooni/pipeline.git af/shovel/ -> pipeline-shovel
if [ -n "$prefix" ]; then
    img_slug="${repo}-${prefix}"
else
    img_slug="${repo}"
fi
# Special case for OONI Explorer next
# XXX remove once we are ready for the stable release
if [ "$(git remote get-url --push origin)" = "git@github.com:ooni/explorer.git" ];then
    img_slug="explorer-next"
fi

# That's image for https://hub.docker.com/r/openobservatory/
img="openobservatory/$img_slug"

ver="$1"
if [ -z "$ver" ]; then
    ver="$(date '+%Y%m%d')"
fi
ver="${ver}-${git_head8}" # tags in git repo are not used, so HEAD is stored as image version

if [ -n "$(git status --short .)" ]; then
    echo "$0: WARNING: the image is built from HEAD (${git_head8}), but the working copy is dirty:" 1>&2
    git status --short . 1>&2
    echo "^^ consider committing those files or adding them to \`.gitignore'" 1>&2
fi

echo "Going to build $img:$ver & $img:latest"
read -p "Press enter to continue, ^C if that's wrong"

set -o errexit
set -o pipefail

DOCKER_BUILD="docker build"
if [ "$(uname -p)" = "arm" ];then
    DOCKER_BUILD="docker buildx build --platform linux/amd64"
fi
(
    set -o xtrace
    git archive --format=tgz "$git_head" | $DOCKER_BUILD -t "$img:$ver" -t "$img:latest" -
)

echo "Going to push $img:$ver & $img:latest"
read -p "Press enter to continue, ^C if that's wrong"

for tag in "$img:$ver" "$img:latest"; do (
    set -o xtrace
    docker push "$tag"
) done
